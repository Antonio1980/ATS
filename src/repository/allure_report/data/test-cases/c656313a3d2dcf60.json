{
  "uid" : "c656313a3d2dcf60",
  "name" : "TRADING SANITY TEST 'TS- 1'",
  "fullName" : "tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test.TestBuyLimitCanceledOrderUnfrozenBalance#test_buy_limit_canceled_order_unfrozen_balance",
  "historyId" : "7b231bba0ba469062cc380b41d00af90",
  "time" : {
    "start" : 1555582739843,
    "stop" : 1555582748684,
    "duration" : 8841
  },
  "description" : "\n    Verify that customer balance unfrozen when limit buy order created and cancelled.\n    ",
  "descriptionHtml" : "<pre><code>Verify that customer balance unfrozen when limit buy order created and cancelled.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '{\"type\":5,\"term\":\"order_cancellation.validation.order_not_found\",\"details\":\"order to cancel is not found\",\"incident_id\":\"04249837-3d2b-42db-aded-560c8a617080\"}' is None",
  "statusTrace" : "self = <tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test.TestBuyLimitCanceledOrderUnfrozenBalance testMethod=test_buy_limit_canceled_order_unfrozen_balance>\n\n    @allure.step(\"Starting with: test_buy_limit_canceled_order_unfrozen_balance\")\n    @automation_logger(logger)\n    def test_buy_limit_canceled_order_unfrozen_balance(self):\n        logger.logger.info(\"TEST CASE N: {0} STARTED !\".format(self.test_case))\n        logger.logger.info(\"method test_buy_limit_canceled_order_unfrozen_balance =['trading_sanity', ]), \")\n        result = 0\n        try:\n            available_base_before = float(\n                self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 3)['result'][\n                    'balance']['available'])\n            quoted_currency_before = self.customer.postman.balance_service.get_currency_balance(\n                int(self.customer.customer_id), 1)\n            available_quoted_before = float(quoted_currency_before['result']['balance']['available'])\n            frozen_quoted_before = float(quoted_currency_before['result']['balance']['frozen'])\n            best_price_from_order_book = float(\n                round(Instruments.get_orders_best_price_and_quantity(self.instrument_id, \"buy\", 2)[0][0]))\n            price = best_price_from_order_book - best_price_from_order_book * 0.50\n            quantity = 1\n            order_limit_buy = Order().set_order(1, self.instrument_id, quantity, price)\n            order_response = self.customer.postman.order_service.create_order(order_limit_buy)\n            order_status = order_response['result']['status']\n    \n            assert order_status\n    \n            external_order_id = order_response['result']['externalOrderId']\n            time.sleep(3)\n            available_base_currency_after_order = float(\n                self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 3)['result'][\n                    'balance']['available'])\n            quoted_after = self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 1)\n            available_quoted_after = float(quoted_after['result']['balance']['available'])\n            frozen_quoted_after = float(quoted_after['result']['balance']['frozen'])\n    \n            assert available_base_before == available_base_currency_after_order\n            assert available_quoted_after == available_quoted_before - price\n            assert frozen_quoted_after == frozen_quoted_before + price\n    \n            cancel_order_response = self.customer.postman.order_service.cancel_order(str(external_order_id))\n            canceled_status_error = cancel_order_response['error']\n    \n>           assert canceled_status_error is None\nE           AssertionError: assert '{\"type\":5,\"term\":\"order_cancellation.validation.order_not_found\",\"details\":\"order to cancel is not found\",\"incident_id\":\"04249837-3d2b-42db-aded-560c8a617080\"}' is None\n\ntests\\web_platform_tests\\trading_sanity_tests\\order_limit_buy_canceled_and_balance_unfrozen_test.py:75: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "r_time_count",
    "time" : {
      "start" : 1555582739840,
      "stop" : 1555582739841,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1555582739840,
      "stop" : 1555582739840,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n    Verify that customer balance unfrozen when limit buy order created and cancelled.\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '{\"type\":5,\"term\":\"order_cancellation.validation.order_not_found\",\"details\":\"order to cancel is not found\",\"incident_id\":\"04249837-3d2b-42db-aded-560c8a617080\"}' is None",
    "statusTrace" : "self = <tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test.TestBuyLimitCanceledOrderUnfrozenBalance testMethod=test_buy_limit_canceled_order_unfrozen_balance>\n\n    @allure.step(\"Starting with: test_buy_limit_canceled_order_unfrozen_balance\")\n    @automation_logger(logger)\n    def test_buy_limit_canceled_order_unfrozen_balance(self):\n        logger.logger.info(\"TEST CASE N: {0} STARTED !\".format(self.test_case))\n        logger.logger.info(\"method test_buy_limit_canceled_order_unfrozen_balance =['trading_sanity', ]), \")\n        result = 0\n        try:\n            available_base_before = float(\n                self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 3)['result'][\n                    'balance']['available'])\n            quoted_currency_before = self.customer.postman.balance_service.get_currency_balance(\n                int(self.customer.customer_id), 1)\n            available_quoted_before = float(quoted_currency_before['result']['balance']['available'])\n            frozen_quoted_before = float(quoted_currency_before['result']['balance']['frozen'])\n            best_price_from_order_book = float(\n                round(Instruments.get_orders_best_price_and_quantity(self.instrument_id, \"buy\", 2)[0][0]))\n            price = best_price_from_order_book - best_price_from_order_book * 0.50\n            quantity = 1\n            order_limit_buy = Order().set_order(1, self.instrument_id, quantity, price)\n            order_response = self.customer.postman.order_service.create_order(order_limit_buy)\n            order_status = order_response['result']['status']\n    \n            assert order_status\n    \n            external_order_id = order_response['result']['externalOrderId']\n            time.sleep(3)\n            available_base_currency_after_order = float(\n                self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 3)['result'][\n                    'balance']['available'])\n            quoted_after = self.customer.postman.balance_service.get_currency_balance(int(self.customer.customer_id), 1)\n            available_quoted_after = float(quoted_after['result']['balance']['available'])\n            frozen_quoted_after = float(quoted_after['result']['balance']['frozen'])\n    \n            assert available_base_before == available_base_currency_after_order\n            assert available_quoted_after == available_quoted_before - price\n            assert frozen_quoted_after == frozen_quoted_before + price\n    \n            cancel_order_response = self.customer.postman.order_service.cancel_order(str(external_order_id))\n            canceled_status_error = cancel_order_response['error']\n    \n>           assert canceled_status_error is None\nE           AssertionError: assert '{\"type\":5,\"term\":\"order_cancellation.validation.order_not_found\",\"details\":\"order to cancel is not found\",\"incident_id\":\"04249837-3d2b-42db-aded-560c8a617080\"}' is None\n\ntests\\web_platform_tests\\trading_sanity_tests\\order_limit_buy_canceled_and_balance_unfrozen_test.py:75: AssertionError",
    "steps" : [ {
      "name" : "SetUp: calling registered customer and adding USD to balance.",
      "time" : {
        "start" : 1555582739844,
        "stop" : 1555582741346,
        "duration" : 1502
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "args",
        "value" : "(<tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test.TestBuyLimitCanceledOrderUnfrozenBalance testMethod=test_buy_limit_canceled_order_unfrozen_balance>,)"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Starting with: test_buy_limit_canceled_order_unfrozen_balance",
      "time" : {
        "start" : 1555582741347,
        "stop" : 1555582748683,
        "duration" : 7336
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert '{\"type\":5,\"term\":\"order_cancellation.validation.order_not_found\",\"details\":\"order to cancel is not found\",\"incident_id\":\"04249837-3d2b-42db-aded-560c8a617080\"}' is None\n",
      "statusTrace" : "  File \"c:\\gitlab\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 141, in impl\n    return func(*a, **kw)\n  File \"C:\\GitLab\\platform-server_qa\\src\\base\\log_decorator.py\", line 27, in log_wrapper\n    raise e\n  File \"C:\\GitLab\\platform-server_qa\\src\\base\\log_decorator.py\", line 22, in log_wrapper\n    return func(*args, **kwargs)\n  File \"C:\\GitLab\\platform-server_qa\\tests\\web_platform_tests\\trading_sanity_tests\\order_limit_buy_canceled_and_balance_unfrozen_test.py\", line 75, in test_buy_limit_canceled_order_unfrozen_balance\n    assert canceled_status_error is None\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "args",
        "value" : "(<tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test.TestBuyLimitCanceledOrderUnfrozenBalance testMethod=test_buy_limit_canceled_order_unfrozen_balance>,)"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "e47429311cb48195",
      "name" : "log",
      "source" : "e47429311cb48195.txt",
      "type" : "text/plain",
      "size" : 9763
    }, {
      "uid" : "8fbdfcf9e0ebea09",
      "name" : "stdout",
      "source" : "8fbdfcf9e0ebea09.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "9b052723cc9d2d84",
      "name" : "stderr",
      "source" : "9b052723cc9d2d84.txt",
      "type" : "text/plain",
      "size" : 10396
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "r_time_count::stop_counter",
    "time" : {
      "start" : 1555582748698,
      "stop" : 1555582748698,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1555582748701,
      "stop" : 1555582748701,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "functional"
  }, {
    "name" : "tag",
    "value" : "trading_sanity"
  }, {
    "name" : "tag",
    "value" : "balance"
  }, {
    "name" : "parentSuite",
    "value" : "tests.web_platform_tests.trading_sanity_tests"
  }, {
    "name" : "suite",
    "value" : "order_limit_buy_canceled_and_balance_unfrozen_test"
  }, {
    "name" : "subSuite",
    "value" : "TestBuyLimitCanceledOrderUnfrozenBalance"
  }, {
    "name" : "host",
    "value" : "QA-LP-ANTONS"
  }, {
    "name" : "thread",
    "value" : "121748-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.web_platform_tests.trading_sanity_tests.order_limit_buy_canceled_and_balance_unfrozen_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "TestBuyLimitCanceledOrderUnfrozenBalance",
    "url" : "https://gitlab.com/cx_group/qa/platform-server_qa/blob/master/tests/web_platform_tests/balance_sanity_tests/order_limit_buy_canceled_and_balance_unfrozen_test.py",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "functional", "balance", "trading_sanity" ]
  },
  "source" : "c656313a3d2dcf60.json",
  "parameterValues" : [ ]
}