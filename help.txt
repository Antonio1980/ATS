TROUBLESHOOTING
---------------

Docker:
-------
1 Remove containers:
* $ docker container prune -f

2 Remove images:
* $ docker image prune -a -f

3 Build image:
* $ docker build . --rm -f "Dockerfile" -t [project_name]:latest

4 Get Docker logs:
* $ docker info

5 Get list of used IP's:
* $ docker network ls

6 Inspect Docker connection:
* $ docker network inspect <contiv-srv-net>

7 Log In to GitLab Registry:
* $ docker login registry.gitlab.com

* Remove by ID:
$ docker network rm

* Docker processes:
$ docker ps

* Docker run container:
$ docker exec -it #containername# bash

* Logs dir:
$ cd /usr/local/zend/var/log

* View logs:
$ tail -f | grep *.log

* Kill all UDP connections (Docker included):
$ lsof -P | grep 'UDP' | awk '{print $2}' | xargs kill -9

Kafka:
------
1 Installation guide:

https://kafka.apache.org/quickstart
-------------------------------------
https://medium.com/@shaaslam/installing-apache-kafka-on-windows-495f6f2fd3c8
----------------------------------------------------------------------------

2 Running Apache Kafka:
* $ .\bin\windows\kafka-server-start.bat .\config\server.properties

3 Start a producer:
* $ kafka-console-producer.bat — broker-list localhost:9092 — topic sql-insert

Solving Network conflict:
-------------------------
* If your docker build fails such as:
"ERROR: cannot create network",
(br-c868a505e7d9): "conflicts with network",
(br-992ca1654879): "networks have overlapping IPv4"

* Look on docker network processes:
$ docker network ls

* Find from returned list conflicted ID:
NETWORK ID          NAME                        DRIVER              SCOPE
10060c77e51a        bridge                      bridge              local
992ca1654879        crm_bo-master_crm-network   bridge              local
82c2f8dcfa10        host                        host                local
64d5c2636300        none                        null                local

* Remove by ID:
$ docker network rm

Solving DB conflict (site not responding):
------------------------------------------
* Docker processes:
$ docker ps

* Docker run container:
$ docker exec -it #containername# bash

* Logs dir:
$ cd /usr/local/zend/var/log

* View logs:
$ tail -f | grep *.log

* Inspect DB network:
$ telnet hostname 3306

Git Configuration:
------------------
* $ git init

* $ git status

* $ git config --global --list

* $ git config --global user.name ""

* $ git config --global user.email ""

* $ cat ~/.gitconfig

* $ git config --global help.autocorrect 1

* $ git config core.autorlf true/false


Python Installation:
--------------------
https://www.python.org/downloads/windows/
-----------------------------------------

* install pip:
$ python get-pip.py

* install virtual environment:
$ pip install virtualenv

* create virtual environment:
$ virtualenv venv --python=python3.7

* activate environment for Windows:
$ venv\Scripts\activate

* activate environment for Unix:
$ source venv/bin/activate

* list all packages installed in the environment:
$ pip freeze

* upgrade pip:
$ python -m pip install --upgrade pip

PROTOBUF
--------

- Download and Installation:

https://github.com/protocolbuffers/protobuf/releases/tag/v3.6.1

$ brew install libtool, automake
$ pip3 install --no-binary=protobuf protobuf
$ python3 ./setup.py build
$ python3 ./setup.py -v install

- Plugin:
https://github.com/dropbox/mypy-protobuf

* Generate python proto:
$ GitLab\protoc-3.6.1-win32\bin\protoc -I=GitLab\proto_contracts\src --python_out=GitLab\proto_contracts\gen

* Generate mypy proto (with autocomplete and keywords):
$ protoc -I=. --mypy_out=../mypy_out --python_out=../python_out LocationServiceResponse.proto

Protobuf installation:
pip install --no-binary=protobuf protobuf
I guess that before it you need pip uninstall protobuf