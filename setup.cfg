[tool:pytest]
# minversion = 3.6
testpaths = statsmodels
addopts = --strict
          --verbose
# Filter warnings generated by dependencies
filterwarnings =
    ignore:pandas.core.common.is_categorical_dtype:DeprecationWarning:patsy
    ignore:Using or importing the ABCs:DeprecationWarning:patsy
    ignore:Using a non-tuple sequence:FutureWarning:mkl_fft
    ignore:Using a non-tuple:FutureWarning:scipy.signal
    ignore:Using a non-tuple:FutureWarning:scipy.stats.stats
    ignore:the matrix subclass is not the recommended:PendingDeprecationWarning:
    ignore:Method .ptp is deprecated:FutureWarning:numpy.core.fromnumeric
    ignore::DeprecationWarning:nbconvert.exporters.exporter_locator
    ignore:Using or importing the ABCs:DeprecationWarning:jinja2.utils
    error:genfromdta:FutureWarning:
    error:StataReader:FutureWarning:
    error:Estimation of VARMA:statsmodels.tools.sm_exceptions.EstimationWarning
    error:Care should be used:UserWarning
    error::statsmodels.tools.sm_exceptions.HypothesisTestWarning
    error::statsmodels.tools.sm_exceptions.SpecificationWarning
markers =
    functional: Heavy tests, could be with some DB or additional access (required isolated env.).
    regression: Simple API tests (checks basic functional of the services- smoke/sanity).
    protobuf: tests with protobuf.
[versioneer]
VCS = git
style = pep440
;versionfile_source = statsmodels/_version.py
;versionfile_build = statsmodels/_version.py
;tag_prefix = v
;parentdir_prefix = statsmodels-
[coverage:run]
source = statsmodels
branch = True
plugins = Cython.Coverage
omit =
    # print_version is untestable
    */print_version.py
    # skip compatibility code
    */compat/*
    # Unused file
    */results/gee_generate_tests.py
    # Results for tests
    */src/repository/results/*
    # Simulation checks
    */tests/*_simulation_check.py
    # Misc non-test files in test directories
    */tests/_*
    */tests/e*
    */tests/c*
    */tests/d*
    */tests/g*
    */tests/m*
    */tests/p*
    */tests/r*
    */tests/s*
    # Versioneer
    */_version.py
[coverage:report]
show_missing = True
ignore_errors = False
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    except NotImplementedError
    except ImportError
    except (HTTPError, URLError, SSLError, timeout)
    except IGNORED_EXCEPTIONS
    # Ignore pass
    pass
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
[coverage:html]
directory = coverage_html_report